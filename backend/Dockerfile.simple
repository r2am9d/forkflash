# Multi-stage Dockerfile for ForkFlash Laravel Backend (Simplified)
# Stage 1: Base image with common dependencies
FROM php:8.3-fpm-alpine AS base

# Set working directory
WORKDIR /var/www

# Install system dependencies (common for both dev and prod)
RUN apk add --no-cache \
    curl \
    libpng-dev \
    libjpeg-turbo-dev \
    libwebp-dev \
    freetype-dev \
    libxml2-dev \
    postgresql-dev \
    oniguruma-dev \
    zip \
    unzip \
    supervisor \
    nginx \
    bash \
    icu-dev \
    libzip-dev

# Configure GD extension
RUN docker-php-ext-configure gd \
    --with-freetype \
    --with-jpeg \
    --with-webp

# Install PHP extensions (common for both dev and prod)
RUN docker-php-ext-install \
    pdo_pgsql \
    pgsql \
    mbstring \
    exif \
    pcntl \
    bcmath \
    gd \
    opcache \
    intl \
    zip

# Install Redis extension
RUN apk add --no-cache --virtual .build-deps $PHPIZE_DEPS \
    && pecl install redis \
    && docker-php-ext-enable redis \
    && apk del .build-deps

# Get Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Create system user
RUN addgroup -g 1000 appgroup && \
    adduser -u 1000 -G appgroup -s /bin/sh -D appuser

# Stage 2: Development image (without Xdebug for now)
FROM base AS development

# Install development tools
RUN apk add --no-cache \
    git \
    nodejs \
    npm \
    bash \
    vim

# Copy PHP development configuration
COPY docker/php/development.ini /usr/local/etc/php/conf.d/development.ini

# Copy application files
COPY --chown=appuser:appgroup . /var/www

# Install Composer dependencies (including dev dependencies) as root first
USER root
RUN chown -R appuser:appgroup /var/www && \
    chmod -R 755 /var/www && \
    su appuser -c "cd /var/www && composer install --optimize-autoloader"

# Switch back to root for final setup
USER root

# Set proper permissions
RUN chown -R appuser:appgroup /var/www && \
    chmod -R 755 /var/www/storage /var/www/bootstrap/cache

# Expose port for PHP-FPM
EXPOSE 9000

# Switch to app user
USER appuser

# Command for development
CMD ["php-fpm"]

# Stage 3: Production image (minimal and secure)
FROM base AS production

# Production PHP configuration
COPY docker/php/production.ini /usr/local/etc/php/conf.d/production.ini

# Copy application files
COPY --chown=appuser:appgroup . /var/www

# Install Composer dependencies (production only)
USER appuser
RUN composer install --no-dev --optimize-autoloader

# Switch back to root for final setup
USER root

# Set proper permissions
RUN chown -R appuser:appgroup /var/www && \
    chmod -R 755 /var/www/storage /var/www/bootstrap/cache

# Copy Nginx configuration
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.conf /etc/nginx/http.d/default.conf

# Copy Supervisor configuration
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create nginx run directory
RUN mkdir -p /run/nginx

# Set proper permissions for web server
RUN chown -R appuser:appgroup /var/www && \
    chown -R appuser:appgroup /var/log/nginx && \
    chown -R appuser:appgroup /var/lib/nginx && \
    chown -R appuser:appgroup /run/nginx

# Expose port for web server
EXPOSE 80

# Switch to app user
USER appuser

# Command for production
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
